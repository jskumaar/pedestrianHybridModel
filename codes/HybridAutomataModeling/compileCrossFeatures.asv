% Note: Features are calculted for the observation duration. If the
% prediction is somewhere after the 1st time step, the actual observations are
% augmented with the predictions made so far.

function CrossFeatures =  compileCrossFeatures(currentPedData, trackletData, trackletNo, pedTrackTimeStep, predTimeStep, Params, varargin)

%% 1) setup
% parameters
AdjustedSampFreq = Params.AdjustedSampFreq;
observationWindow = Params.observationWindow;
% indices
start_ind_ped_data = max(pedTrackTimeStep-observationWindow+predTimeStep ,1);
gaze_start_ind = max(pedTrackTimeStep-observationWindow+1, 1);


% copy the data based on the prediction tracklets
N_tracklets = size(trackletData,1);


% initialize variables with actual observed data till the time step
gaze = currentPedData.isLooking(gaze_start_ind : pedTrackTimeStep);  %gaze uses only observed information and not predicted information and assumed to stay constant within the prediction horizon 
DTCurb = currentPedData.latDispPedCw(start_ind_ped_data:pedTrackTimeStep);
DTCW = currentPedData.longDispPedCw(start_ind_ped_data:pedTrackTimeStep);
ped_speed = currentPedData.lonVelocity(start_ind_ped_data:pedTrackTimeStep);
veh_ped_dist = currentPedData.long_disp_ped_car(start_ind_ped_data:pedTrackTimeStep);
isSamedirection = currentPedData.isPedSameDirection(start_ind_ped_data:pedTrackTimeStep);
closeCar_ind = currentPedData.closeCar_ind(start_ind_ped_data:pedTrackTimeStep);

    
for Id = 1:N_tracklets
    if Id==1
        predPedData = trackletData{Id};
        DTCurb = [DTCurb; predPedData.latDispPedCw(2:end)];
        DTCW = [DTCW; predPedData.longDispPedCw(2:end)];
        ped_speed = [ped_speed; predPedData.lonVelocity(2:end)];           
        veh_ped_dist = [veh_ped_dist; predPedData.long_disp_ped_car(2:end) ];
        isSamedirection = [isSamedirection; predPedData.isPedSameDirection(2:end) ];
        closeCar_ind = [closeCar_ind; predPedData.closeCar_ind(2:end) ];            
    end
    
    if ( (Id==2 || Id==3) && Id==trackletNo)
        predPedData = trackletData{Id};
        DTCurb = [DTCurb; predPedData.latDispPedCw(2:end)];
        DTCW = [DTCW; predPedData.longDispPedCw(2:end)];
        ped_speed = [ped_speed; predPedData.lonVelocity(2:end)];           
        veh_ped_dist = [veh_ped_dist; predPedData.long_disp_ped_car(2:end) ];
        isSamedirection = [isSamedirection; predPedData.isPedSameDirection(2:end) ];
        closeCar_ind = [closeCar_ind; predPedData.closeCar_ind(2:end) ];  
    end
    
    
    if ( (Id==4 || Id==5) && Id==trackletNo)
        
        if length(trackletData{2}.tracKLifetime) < length(trackletData{3}.tracKLifetime)
            predPedData = trackletData{2};
            DTCurb = [DTCurb; predPedData.latDispPedCw(2:end)];
            DTCW = [DTCW; predPedData.longDispPedCw(2:end)];
            ped_speed = [ped_speed; predPedData.lonVelocity(2:end)];           
            veh_ped_dist = [veh_ped_dist; predPedData.long_disp_ped_car(2:end) ];
            isSamedirection = [isSamedirection; predPedData.isPedSameDirection(2:end) ];
            closeCar_ind = [closeCar_ind; predPedData.closeCar_ind(2:end) ];  
        else
            predPedData = trackletData{3};
            DTCurb = [DTCurb; predPedData.latDispPedCw(2:end)];
            DTCW = [DTCW; predPedData.longDispPedCw(2:end)];
            ped_speed = [ped_speed; predPedData.lonVelocity(2:end)];           
            veh_ped_dist = [veh_ped_dist; predPedData.long_disp_ped_car(2:end) ];
            isSamedirection = [isSamedirection; predPedData.isPedSameDirection(2:end) ];
            closeCar_ind = [closeCar_ind; predPedData.closeCar_ind(2:end) ]; 
        end
        
            predPedData = trackletData{Id};
            DTCurb = [DTCurb; predPedData.latDispPedCw(2:end)];
            DTCW = [DTCW; predPedData.longDispPedCw(2:end)];
            ped_speed = [ped_speed; predPedData.lonVelocity(2:end)];           
            veh_ped_dist = [veh_ped_dist; predPedData.long_disp_ped_car(2:end) ];
            isSamedirection = [isSamedirection; predPedData.isPedSameDirection(2:end) ];
            closeCar_ind = [closeCar_ind; predPedData.closeCar_ind(2:end) ]; 

    end
    
end

if N_tracklets>5
    x=1;
end

% use only the last observation window data
DTCurb = DTCurb(end-observationWindow+1 : end);
DTCW = DTCW(end-observationWindow+1 : end);
ped_speed = ped_speed(end-observationWindow+1 : end);       
veh_ped_dist = veh_ped_dist(end-observationWindow+1 : end);
isSamedirection = isSamedirection(end-observationWindow+1 : end);
closeCar_ind = closeCar_ind(end-observationWindow+1 : end);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% 2) compile vehicle data (if available)
if size(varargin)~=0
    carData = varargin{1};
    carTrackCurrentTimeStep = varargin{2};
    
    % car time step
%     ped_track_time = currentPedData.frame(pedTrackTimeStep);  % comment this out when using actual car data
    ped_track_time = currentPedData.frame(pedTrackTimeStep) + predTimeStep*AdjustedSampFreq; % comment this out when using predicted car data
%     car_timeStep = find(carData.frame == ped_track_time);
    carTimeStep = carTrackCurrentTimeStep + predTimeStep;
    % when the car observations are not available for the time steps in the
    % prediction, use the last N observations where N is the no. of time
    % steps that falls within the observation window for which actual
    % observed car data is available.
%     if ( isempty(car_timeStep) && carData.frame(end) < ped_track_time)
%         car_timeStep = length(carData.frame);
%         start_ind = car_timeStep - (ped_track_time-carData.frame(end))/AdjustedSampFreq;
%     elseif ~isempty(car_timeStep)
%         start_ind = max(car_timeStep-observationWindow+1, 1);
%     else % for debugging; to check if there are any instances when there is no cardata before the prediction time
%         x=1;
%     end
    if ( carTimeStep < length(carData))
        start_ind = max(car_timeStep-observationWindow+1, 1);
    elseif (carTimeStep - length(carData)) <= observationWindow
        start_ind = max(car_timeStep-observationWindow+1, 1);
    else % for debugging; to check if there are any instances when there is no cardata before the prediction time
        x=1;
    end
    % copy car data to separate variables
    veh_speed = carData.lonVelocity(start_ind: car_timeStep);
    veh_acc = carData.lonAcceleration(start_ind : car_timeStep);
    isNearLane = currentPedData.isNearLane(start_ind_ped_data:pedTrackTimeStep);
    % time steps within observation window for which there is an ego-car
    close_car_ind = find(closeCar_ind~=0 & closeCar_ind~=inf);                  
    ego_car_ind = find(veh_ped_dist~=0 & veh_ped_dist~=inf);                  
    %%%%%%%%%%%%%%%%%%%%
    % compile vehicle features

    % time steps when there is an ego-car
    CrossFeatures.duration_ego_vehicle = length(close_car_ind)/observationWindow;
    %%%%%%%%%%%%%%%%%%%%
    % time steps where the pedestrian and car is within the observation zone of
    % the AV (not implemented)
    %%%%%%%%%%%%%%%%%%%%
    CrossFeatures.mean_veh_speed = mean(veh_speed);
%     CrossFeatures.std_veh_speed = std(veh_speed);                             

    CrossFeatures.mean_veh_acc = mean(veh_acc);
%     CrossFeatures.std_veh_acc = std(veh_acc); 

    CrossFeatures.gaze_ratio = sum(gaze(close_car_ind))/length(close_car_ind);
    CrossFeatures.isSameDirection = mean(isSamedirection)>0.5;
    CrossFeatures.isNearLane = mean(isNearLane)>0.5;

    CrossFeatures.mean_veh_ped_dist = mean(veh_ped_dist(ego_car_ind));
%     CrossFeatures.std_veh_ped_dist = std(veh_ped_dist(ego_car_ind)); 
else
    CrossFeatures.mean_veh_speed = [];
    CrossFeatures.mean_veh_acc = [];
    CrossFeatures.mean_veh_ped_dist = [];
    CrossFeatures.gaze_ratio = [];
    CrossFeatures.isSameDirection = [];
    CrossFeatures.isNearLane = [];
    CrossFeatures.duration_ego_vehicle = [];
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% 3) compile pedestrian features and scene data
ped_ind = find(DTCurb~=0 & DTCW~=0);

CrossFeatures.mean_ped_speed = mean(ped_speed(ped_ind));
% CrossFeatures.std_ped_speed = std(ped_speed(ped_ind));

CrossFeatures.mean_DTCurb = mean(DTCurb(ped_ind));
% CrossFeatures.std_DTCurb = std(DTCurb(ped_ind));

CrossFeatures.mean_DTCW = mean(DTCW(ped_ind));
% CrossFeatures.std_DTCW = std(DTCW(ped_ind));
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
end